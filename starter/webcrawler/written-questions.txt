Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    ################################################ ANSWER ######################################

    The ParallelWebCrawler access way more urls. While the timeout stops the crawl the parsing continues until it is finished.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        ################################################ ANSWER ######################################
        Older pc probably has only one core. Using parallelism will cause thread jumping and results in slower results.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        ################################################ ANSWER ######################################
        When there is more processors than threads. So each thread can use one processor and actually run in parallel.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

      ################################################ ANSWER ######################################
      Monitoring and logging performance data

    (b) What are the join points of the Profiler in the web crawler program?

        ################################################ ANSWER ######################################
        Join Points are the methods of any class and pointcuts are every method that uses the annotation "@Profiled"

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    ################################################ ANSWER ######################################
    1. Dependency Injection: We use the Guice framework. We use it in the WebCrawlerMain class to inject WebCrawler and Profiler.
        + Easier to manage, we do not have to create the instances by ourself.
        - Code gets hard to read and understand. Complexity increases.

    2. Builder Pattern: used in CrawlerConfiguration
        + Leads to more readable code when there are a lot of instance variable
        - more code have to be written, only needed with complex objects

    3. Abstract Factory: PageParseFactory
        + Factory can return different implementations of interface
        - not needed, in fact we use only one implementation of PageParseFactory. Needs more classes and interfaces